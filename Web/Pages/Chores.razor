@page "/chores"

@using System.Net.Http.Json
@using Infrastructure 
@inject IChoreRepository ChoreRepository
@inject ISnackbar Snackbar

<MudTable Items="@ChoreList" Hover=true Filter="new Func<ChoreDTO,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
           IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Opgaver</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
		@if(applyButtonPosition.DisplayApplyButtonAtStart())
		{
			<col style="width:50px;" />
		}
		<col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
		@if (applyButtonPosition.DisplayApplyButtonAtEnd())
		{
			<col style="width:50px;" />
		}
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ChoreDTO, object>(x=>x.Name)">Navn</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ChoreDTO, object>(x=>x.Duration)">Tid</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ChoreDTO, object>(x=>x.Interval)">Interval</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Duration">@context.Duration</MudTd>
        <MudTd DataLabel="Interval">@context.Interval</MudTd>
    </RowTemplate>
    @* <RowEditingTemplate>
        <MudTd DataLabel="Nr">@context.Number</MudTd>
        <MudTd DataLabel="Sign">
            <MudTextField @bind-Value="@context.Sign" Required />
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
        <MudTd DataLabel="Position">
            <MudNumericField @bind-Value="@context.Position" Required Min="1" />
        </MudTd>
        <MudTd DataLabel="Molar mass">
            <MudTextField @bind-Value="@context.Molar" Required />
        </MudTd>
    </RowEditingTemplate> *@
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
	private List<string> editEvents = new();
	private bool blockSwitch = false;
	private string searchString = "";
	private ChoreDTO selectedItem1 = null;
	private ChoreDTO elementBeforeEdit;
	private HashSet<ChoreDTO> selectedItems1 = new HashSet<ChoreDTO>();
	private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
	private IEnumerable<ChoreDTO> ChoreList = new List<ChoreDTO>();

    protected override async Task OnInitializedAsync()
    {
        ChoreList = await ChoreRepository.ReadAllChoresAsync(Guid.Parse("30bc356c-f2cf-42b6-961e-dfd178a50a66"));
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    @* private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Sign = ((Element)element).Sign,
            Name = ((Element)element).Name,
            Molar = ((Element)element).Molar,
            Position = ((Element)element).Position
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Element)element).Name}");
    } *@

    @* private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((Element)element).Name} committed");
    } *@

    private bool FilterFunc(ChoreDTO chore)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (chore.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (chore.Duration.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (chore.Interval.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 
}