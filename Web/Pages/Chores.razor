@page "/chores"

@inject IChoreRepository choreService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDataGrid T="ChoreDTO" Items="@ChoreList" Hover=true EditMode="DataGridEditMode.Form" 
            EditTrigger="@DataGridEditTrigger.Manual"
            >
    <ToolBarContent>
        <MudText Typo="Typo.h6" Class="pr-4">Opgaver</MudText>
        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small OnClick="@((e) => OpenAddDialog(dialogOption))" />
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="ChoreDTO" Field="Name" Title="Navn"/>
        <Column T="ChoreDTO" Field="Duration" Title ="Tid" />
        <Column T="ChoreDTO" Field="Interval">
            @* <EditTemplate>
                <MudSelect @bind-Value="context.Item.Interval" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                    @foreach (Duration item in Enum.GetValues(typeof(Duration)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                </MudSelect>
            </EditTemplate> *@
        </Column>
        <Column T="ChoreDTO" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
            </CellTemplate>
        </Column> 
    </Columns>
</MudDataGrid>

@* <MudTable Items="@ChoreList" Hover=true Filter="new Func<ChoreDTO,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
           IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Class="pr-4">Opgaver</MudText>
        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small OnClick="@((e) => OpenAddDialog(dialogOption))" />
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
		@if(applyButtonPosition.DisplayApplyButtonAtStart())
		{
			<col style="width:50px;" />
		}
		<col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
		@if (applyButtonPosition.DisplayApplyButtonAtEnd())
		{
			<col style="width:50px;" />
		}
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ChoreDTO, object>(x=>x.Name)">Navn</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ChoreDTO, object>(x=>x.Duration)">Tid</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ChoreDTO, object>(x=>x.Interval)">Interval</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Duration">@context.Duration</MudTd>
        <MudTd DataLabel="Interval">@context.Interval</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable> *@

@code {
	private string searchString = "";

	private IEnumerable<ChoreDTO> ChoreList = new List<ChoreDTO>();

    DialogOptions dialogOption = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

    protected override async Task OnInitializedAsync()
    {
        ChoreList = await choreService.ReadAllChoresAsync(Guid.Parse("30bc356c-f2cf-42b6-961e-dfd178a50a66"));
    }

    private async Task OpenAddDialog(DialogOptions options){
        var dialog = DialogService.Show<AddChoreForm>("Tilføj Opgave", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ChoreList = await choreService.ReadAllChoresAsync(Guid.Parse("30bc356c-f2cf-42b6-961e-dfd178a50a66"));
        }
    }

    private bool FilterFunc(ChoreDTO chore)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (chore.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (chore.Duration.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (chore.Interval.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 
}